# Autogenerated wrapper script for LLVMBootstrap_jll for x86_64-linux-musl
export libLTO, llvm_config, libLLVM, libclang

using Zlib_jll
using XML2_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libLTO`
const libLTO_splitpath = ["lib", "libLTO.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libLTO_path = ""

# libLTO-specific global declaration
# This will be filled out by __init__()
libLTO_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libLTO = "libLTO.so.6"


# Relative path to `llvm_config`
const llvm_config_splitpath = ["bin", "llvm-config"]

# This will be filled out by __init__() for all products, as it must be done at runtime
llvm_config_path = ""

# llvm_config-specific global declaration
function llvm_config(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        if !isempty(get(ENV, LIBPATH_env, ""))
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', ENV[LIBPATH_env])
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(llvm_config_path)
    end
end


# Relative path to `libLLVM`
const libLLVM_splitpath = ["lib", "libLLVM.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libLLVM_path = ""

# libLLVM-specific global declaration
# This will be filled out by __init__()
libLLVM_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libLLVM = "libLLVM-6.0.so"


# Relative path to `libclang`
const libclang_splitpath = ["lib", "libclang.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libclang_path = ""

# libclang-specific global declaration
# This will be filled out by __init__()
libclang_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libclang = "libclang.so.6"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    append!.(Ref(PATH_list), (Zlib_jll.PATH_list, XML2_jll.PATH_list,))
    append!.(Ref(LIBPATH_list), (Zlib_jll.LIBPATH_list, XML2_jll.LIBPATH_list,))

    global libLTO_path = abspath(joinpath(artifact"LLVMBootstrap", libLTO_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libLTO_handle = dlopen(libLTO_path)
    push!(LIBPATH_list, dirname(libLTO_path))

    global llvm_config_path = abspath(joinpath(artifact"LLVMBootstrap", llvm_config_splitpath...))

    push!(PATH_list, dirname(llvm_config_path))
    global libLLVM_path = abspath(joinpath(artifact"LLVMBootstrap", libLLVM_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libLLVM_handle = dlopen(libLLVM_path)
    push!(LIBPATH_list, dirname(libLLVM_path))

    global libclang_path = abspath(joinpath(artifact"LLVMBootstrap", libclang_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libclang_handle = dlopen(libclang_path)
    push!(LIBPATH_list, dirname(libclang_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

